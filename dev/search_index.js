var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StanLogDensityProblems","category":"page"},{"location":"#StanLogDensityProblems","page":"Home","title":"StanLogDensityProblems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StanLogDensityProblems implements the LogDensityProblems API for Stan models using BridgeStan. For easily benchmarking inference algorithms, StanLogDensityProblems also integrates with PosteriorDB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [\n    StanLogDensityProblems,\n    isdefined(Base, :get_extension) ?\n        Base.get_extension(StanLogDensityProblems, :StanLogDensityProblemsPosteriorDBExt) :\n        StanLogDensityProblems.StanLogDensityProblemsPosteriorDBExt\n]","category":"page"},{"location":"#StanLogDensityProblems.StanProblem","page":"Home","title":"StanLogDensityProblems.StanProblem","text":"StanProblem(model::BridgeStan.StanModel; nan_on_error::Bool=false)\n\nA wrapper for an unconstrained Stan model with data, implementing the LogDensityProblems interface.\n\nIf nan_on_error=true, then any errors from Stan will be suppressed, and NaNs will be returned.\n\n\n\n\n\n","category":"type"},{"location":"#StanLogDensityProblems.StanProblem-Tuple","page":"Home","title":"StanLogDensityProblems.StanProblem","text":"StanProblem(lib::String[, data::String[ seed::Int]]; nan_on_error::Bool=false, kwargs...)\n\nConstruct a BridgeStan.StanModel and wrap it as a StanProblem.\n\nlib is a path either to a compiled Stan model or to a .stan file. For details on the arguments, see the docstring for BridgeStan.StanModel.\n\nnote: Note\nBy default, Stan does not compile the model with multithreading support. If this is needed, pass make_args=[\"STAN_THREADS=true\"] to kwargs.\n\n\n\n\n\n","category":"method"},{"location":"#StanLogDensityProblems.StanProblem-Tuple{PosteriorDB.Posterior, AbstractString, Vararg{Any}}","page":"Home","title":"StanLogDensityProblems.StanProblem","text":"StanProblem(\n    posterior::PosteriorDB.Posterior,\n    path::AbstractString,\n    args...;\n    nan_on_error::Bool=false,\n    force::Bool=false,\n    kwargs...,\n)\n\nConstruct a StanProblem from the Stan model implementation and dataset corresponding to posterior.\n\nThe model file will be copied to path before compilation. force=true will first remove an existing file. However, if the original file has already been compiled in this directory, the new model will not be compiled.\n\nRemaining args and kwargs are forwarded to the main constructor.\n\n\n\n\n\n","category":"method"}]
}
